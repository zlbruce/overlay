diff -ur wireshark-1.10.0rc1/epan/addr_resolv.c wireshark-1.10.0rc1-zl/epan/addr_resolv.c
--- wireshark-1.10.0rc1/epan/addr_resolv.c	2013-04-23 02:05:19.000000000 +0800
+++ wireshark-1.10.0rc1-zl/epan/addr_resolv.c	2013-05-15 14:39:46.398167005 +0800
@@ -455,14 +455,14 @@
   tp = proto_table[hash_idx];
 
   if( tp == NULL ) {
-    tp = proto_table[hash_idx] = se_new(hashport_t);
+    tp = proto_table[hash_idx] = (hashport_t *)g_malloc(sizeof(hashport_t));
   } else {
     while(1) {
       if( tp->port == port ) {
         return;
       }
       if (tp->next == NULL) {
-        tp->next = se_new(hashport_t);
+        tp->next = (hashport_t *)g_malloc(sizeof(hashport_t));
         tp = tp->next;
         break;
       }
@@ -639,14 +639,14 @@
   tp = table[hash_idx];
 
   if( tp == NULL ) {
-    tp = table[hash_idx] = se_new(hashport_t);
+    tp = table[hash_idx] = (hashport_t *)g_malloc(sizeof(hashport_t));
   } else {
     while(1) {
       if( tp->port == port ) {
         return tp->name;
       }
       if (tp->next == NULL) {
-        tp->next = se_new(hashport_t);
+        tp->next = (hashport_t *)g_malloc(sizeof(hashport_t));
         tp = tp->next;
         break;
       }
@@ -757,7 +757,7 @@
 static hashipv4_t *
 new_ipv4(const guint addr)
 {
-  hashipv4_t *tp = se_new(hashipv4_t);
+  hashipv4_t *tp = g_malloc(sizeof(hashipv4_t));
   tp->addr = addr;
   tp->next = NULL;
   tp->resolve = FALSE;
@@ -849,7 +849,7 @@
 static hashipv6_t *
 new_ipv6(const struct e_in6_addr *addr)
 {
-  hashipv6_t *tp = se_new(hashipv6_t);
+  hashipv6_t *tp = g_malloc(sizeof(hashipv6_t));
   tp->addr = *addr;
   tp->next = NULL;
   tp->resolve = FALSE;
@@ -1295,7 +1295,7 @@
 {
   hashmanuf_t *mtp;
 
-  mtp = se_new(hashmanuf_t);
+  mtp = (hashmanuf_t *)g_malloc(sizeof(hashmanuf_t));
   memcpy(mtp->addr, addr, sizeof(mtp->addr));
   /*  The length of this name is limited (in the number of UTF-8 characters,
    *  not bytes) in make-manuf.  That doesn't mean a user can't put a longer
@@ -1311,7 +1311,7 @@
 {
   hashwka_t *wtp;
 
-  wtp = se_new(hashwka_t);
+  wtp =  (hashwka_t *)g_malloc(sizeof(hashwka_t));
   memcpy(wtp->addr, addr, sizeof(wtp->addr));
   g_strlcpy(wtp->name, name, MAXNAMELEN);
   wtp->next = NULL;
@@ -1362,7 +1362,7 @@
      well-known-address table, creating that table if necessary. */
   wka_tp = wka_table[mask];
   if (wka_tp == NULL)
-    wka_tp = wka_table[mask] = (hashwka_t *(*)[HASHETHSIZE])se_alloc0(sizeof *wka_table[mask]);
+    wka_tp = wka_table[mask] = g_malloc0(sizeof *wka_table[mask]);
 
   hash_idx = hash_eth_wka(addr, mask);
 
@@ -1626,7 +1625,7 @@
 eth_hash_new_entry(const guint8 *addr, const gboolean resolve) {
   hashether_t *tp;
 
-  tp = se_new(hashether_t);
+  tp = (hashether_t *)g_malloc(sizeof(hashether_t));
   memcpy(tp->addr, addr, sizeof(tp->addr));
   tp->status = HASHETHER_STATUS_UNRESOLVED;
   g_strlcpy(tp->hexaddr, bytestring_to_str(addr, sizeof(tp->addr), ':'), sizeof(tp->hexaddr));
@@ -1909,11 +1907,11 @@
   tp = ipxnet_table[hash_idx];
 
   if( tp == NULL ) {
-    tp = ipxnet_table[hash_idx] = se_new(hashipxnet_t);
+    tp = ipxnet_table[hash_idx] = (hashipxnet_t *)g_malloc(sizeof(hashipxnet_t));
   } else {
     while(1) {
       if (tp->next == NULL) {
-        tp->next = se_new(hashipxnet_t);
+        tp->next = (hashipxnet_t *)g_malloc(sizeof(hashipxnet_t));
         tp = tp->next;
         break;
       }
@@ -1942,14 +1940,14 @@
   tp = ipxnet_table[hash_idx];
 
   if( tp == NULL ) {
-    tp = ipxnet_table[hash_idx] = se_new(hashipxnet_t);
+    tp = ipxnet_table[hash_idx] = (hashipxnet_t *)g_malloc(sizeof(hashipxnet_t));
   } else {
     while(1) {
       if (tp->addr == addr) {
         return tp->name;
       }
       if (tp->next == NULL) {
-        tp->next = se_new(hashipxnet_t);
+        tp->next = (hashipxnet_t *)g_malloc(sizeof(hashipxnet_t));
         tp = tp->next;
         break;
       }
@@ -2272,19 +2270,19 @@
   hash_idx = HASH_IPV4_ADDRESS(subnet_addr);
 
   if(NULL == entry->subnet_addresses) {
-    entry->subnet_addresses = (hashipv4_t**) se_alloc0(sizeof(hashipv4_t*) * HASHHOSTSIZE);
+    entry->subnet_addresses = g_new0(hashipv4_t*,HASHHOSTSIZE);
   }
 
   if(NULL != (tp = entry->subnet_addresses[hash_idx])) {
     if(tp->addr == subnet_addr) {
       return;    /* XXX provide warning that an address was repeated? */
     } else {
-      hashipv4_t * new_tp = se_new(hashipv4_t);
+      hashipv4_t * new_tp = g_new(hashipv4_t,1);
       tp->next = new_tp;
       tp = new_tp;
     }
   } else {
-    tp = entry->subnet_addresses[hash_idx] = se_new(hashipv4_t);
+    tp = entry->subnet_addresses[hash_idx] = g_new(hashipv4_t,1);
   }
 
   tp->next = NULL;
@@ -2465,7 +2463,7 @@
 #endif /*GNU_ADNS */
 
   if (!addrinfo_list) {
-    ai = se_new0(struct addrinfo);
+    ai = g_malloc0(sizeof(struct addrinfo));
     addrinfo_list = addrinfo_list_last = ai;
   }
 
@@ -2822,15 +2820,15 @@
   new_resolved_objects = TRUE;
 
   if (!addrinfo_list) {
-    ai = se_new0(struct addrinfo);
+    ai = g_malloc0(sizeof(struct addrinfo));
     addrinfo_list = addrinfo_list_last = ai;
   }
 
-  sa4 = se_new0(struct sockaddr_in);
+  sa4 = g_malloc0(sizeof(struct sockaddr_in));
   sa4->sin_family = AF_INET;
   sa4->sin_addr.s_addr = addr;
 
-  ai = se_new0(struct addrinfo);
+  ai = g_malloc0(sizeof(struct addrinfo));
   ai->ai_family = AF_INET;
   ai->ai_addrlen = sizeof(struct sockaddr_in);
   ai->ai_canonname = (char *) tp->name;
@@ -2880,15 +2878,15 @@
   new_resolved_objects = TRUE;
 
   if (!addrinfo_list) {
-    ai = se_new0(struct addrinfo);
+    ai = g_malloc0(sizeof(struct addrinfo));
     addrinfo_list = addrinfo_list_last = ai;
   }
 
-  sa6 = se_new0(struct sockaddr_in6);
+  sa6 = g_malloc0(sizeof(struct sockaddr_in6));
   sa6->sin6_family = AF_INET;
   memcpy(sa6->sin6_addr.s6_addr, addrp, 16);
 
-  ai = se_new0(struct addrinfo);
+  ai = g_malloc0(sizeof(struct addrinfo));
   ai->ai_family = AF_INET6;
   ai->ai_addrlen = sizeof(struct sockaddr_in);
   ai->ai_canonname = (char *) tp->name;
diff -ur wireshark-1.10.0rc1/epan/packet.c wireshark-1.10.0rc1-zl/epan/packet.c
--- wireshark-1.10.0rc1/epan/packet.c	2013-04-23 02:05:19.000000000 +0800
+++ wireshark-1.10.0rc1-zl/epan/packet.c	2013-05-15 14:33:04.096156232 +0800
@@ -144,8 +144,8 @@
 	 * Reinitialize resolution information. We do initialization here in
 	 * case we need to resolve between captures.
 	 */
-	host_name_lookup_cleanup();
-	host_name_lookup_init();
+	//host_name_lookup_cleanup();
+	//host_name_lookup_init();
 
 	/* Initialize the table of conversations. */
 	epan_conversation_init();
@@ -193,8 +193,8 @@
 	 * Reinitialize resolution information. We do initialization here in
 	 * case we need to resolve between captures.
 	 */
-	host_name_lookup_cleanup();
-	host_name_lookup_init();
+	//host_name_lookup_cleanup();
+	//host_name_lookup_init();
 }
 
 /* Allow protocols to register a "cleanup" routine to be
